import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of, BehaviorSubject } from 'rxjs';
import { catchError, map, switchMap, mergeAll } from 'rxjs/operators';
import { StorageService } from './storage.service';

interface User {
  id?: number; // Optional: Assuming the ID is generated by the server
  name: string;
  email: string;
  password: string;
  status?: string;
}

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrlUsers = 'http://localhost:3000/users'; // L'URL de votre API
  private isLoggedInSubject = new BehaviorSubject<boolean>(false); // Gère l'état de connexion
  isLoggedIn$ = this.isLoggedInSubject.asObservable();


  constructor(private http: HttpClient, private storageService: StorageService) {
    const isLoggedIn = this.storageService.getItem('isLoggedIn') === 'true';
    this.isLoggedInSubject.next(isLoggedIn);
  }

  // Méthode pour s'inscrire un utilisateur
  register(user: User): Observable<User | string> {
    return this.checkUserExists(user.email).pipe(
      switchMap((exists) => {
        if (exists) {
          return of('Cet email est déjà utilisé.'); // Return an observable with error message if user exists
        } else {
          return this.http.post<User>(this.apiUrlUsers, user); // Return the observable from the POST request
        }
      }),
      catchError((error) => {
        console.error('Erreur lors de la vérification de l\'utilisateur', error);
        return of('Une erreur est survenue.'); // Handle error case and return observable of error message
      })
    );
  }

  // Méthode pour vérifier si l'utilisateur existe
  private checkUserExists(email: string): Observable<boolean> {
    return this.http.get<User[]>(this.apiUrlUsers).pipe(
      map((users) => users.some(user => user.email === email)), // Check if any user has the same email
      catchError(() => of(false)) // If there is an error, assume the user does not exist
    );
  }

  // Méthode de connexion
  login(email: string, password: string): Observable<User | string> {
    return this.http.get<User[]>(this.apiUrlUsers, {
      params: { email }
    }).pipe(
      map(users => {
        const user = users.find(u => u.email === email);
        if (!user) {
          return of('Email non trouvé.'); // Return an Observable with a message if no user is found
        }

        // Check if the password matches
        if (user.password === password) {
          this.isLoggedInSubject.next(true); // Met à jour l'état de connexion
          this.storageService.setItem('isLoggedIn', JSON.stringify(true));
          this.storageService.setItem('currentConnectedUserId', JSON.stringify(user.id));

          return of(user); 
        } else {
          return of('Mot de passe incorrect.'); 
        }
      }),
      catchError((error) => {
        console.error('Erreur lors de la connexion', error);
        return of('Une erreur est survenue lors de la connexion.'); 
      }),

      mergeAll()
    );
  }

  updateUserStatus(userId: number, status: string): Observable<User> {
    return this.http.patch<User>(`${this.apiUrlUsers}/${userId}`, { status }).pipe(
    );
  }

  getCurrentConnectedUserId(): number | null {
    const userId = this.storageService.getItem('currentConnectedUserId');
    return userId ? parseInt(userId, 10) : null;
  }

  logout(): void {
    let userId = -1;
  
    const storedUserId = this.storageService.getItem('currentConnectedUserId');
    userId = storedUserId ? Number(storedUserId) : -1;
  
    if (userId !== -1) {
      this.updateUserStatus(userId, "disconnected");
      this.storageService.removeItem('currentConnectedUserId');
      this.storageService.setItem('isLoggedIn', "false");
    } else {
      console.warn("No connected user found, or invalid user ID.");
    }
  }
}
